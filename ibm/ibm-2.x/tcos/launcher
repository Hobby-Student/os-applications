#!/usr/bin/env python

# standard modules
import commands
import os
import shutil
import string
import sys
import tempfile
import subprocess
import signal
import time
import socket

# TCOS modules
import pytcos.tcos as tcos

# local functions
def cond_fillvar(var, parameter, value):
	if value != '':
		var.append(parameter + ':' + value)

# initialize LDAP access
l = tcos.Launcher()
u = tcos.Util()

#try:
#	apptitle = l.getAppInfo()['description']
#except:
#	apptitle = l.getAppInfo()['name']

apptitle = l.getAppInfo()['name']

# get data
ibm_server = l.ENTRY.get('Application.Server', '')

try:
	temp_dir = tempfile.mkdtemp('', '.ibm-', '/tmp')
except:
	sys.exit()

# ibm_5250 directory in user homedir
if os.path.exists(os.path.expanduser('~/.iSeriesAccess')) == False:
	os.mkdir(os.path.expanduser('~/.iSeriesAccess'), 0755)

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250')) == False:
	os.mkdir(os.path.expanduser('~/.iSeriesAccess/ibm_5250'), 0755)

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K')) == False:
	os.mkdir(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K'), 0755)

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/C')) == False:
	os.mkdir(os.path.expanduser('~/.iSeriesAccess/ibm_5250/C'), 0755)

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K/5250.102')) == False:
	shutil.copy('/opt/ibm/tcos/defaults/5250.102', os.path.expanduser('~/.iSeriesAccess/ibm_5250/K'))

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K/5250.101')) == False:
	shutil.copy('/opt/ibm/tcos/defaults/5250.101', os.path.expanduser('~/.iSeriesAccess/ibm_5250/K'))

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K/pc.102')) == False:
	shutil.copy('/opt/ibm/tcos/defaults/pc.102', os.path.expanduser('~/.iSeriesAccess/ibm_5250/K'))

if os.path.exists(os.path.expanduser('~/.iSeriesAccess/ibm_5250/K/pc.101')) == False:
	shutil.copy('/opt/ibm/tcos/defaults/pc.101', os.path.expanduser('~/.iSeriesAccess/ibm_5250/K'))

# create links
os.symlink(os.path.expanduser('~/.iSeriesAccess'), os.path.join(temp_dir,'.iSeriesAccess'))

#IBM5250*DISPLAY_HEIGHT_ADJUSTMENT:17
#IBM5250*changeIPAddress:DISABLE
#IBM5250*FontMenu:fixed_fonts_only

# build IBM5250 file
ibm5250 = '''\
IBM5250*27X132_IN_800X600:enable
%(ibm5250_str)s
'''

# pattern for devilspie config
devilspiecfg='''\
(if
	(and
		(is (window_class) "IBM5250")
		(matches (window_name) "%(titlestr)s")
	)
	(begin
		(undecorate)
		(maximize)
	)
)
'''
devilspiepid = 0
if l.ENTRY.get('General.Fullscreen', 'No') == 'Yes':
	titlestr = apptitle + " : .*"
	devilspiecfg % locals()
	devilspiecfg_name = os.path.join(temp_dir, 'fullscreen.ds')
	try:
		devilspiecfg_file = open(devilspiecfg_name, 'w')
		devilspiecfg_file.write(devilspiecfg % locals())
		devilspiecfg_file.close()
		devilspiepid = subprocess.Popen(["/usr/bin/devilspie", devilspiecfg_name]).pid
	except:
		pass

ibm5250_vars = []
# cond_fillvar(ibm5250_vars, '', l.ENTRY.get('Application.', ''))
cond_fillvar(ibm5250_vars, 'IBM5250*KeyRemap', l.ENTRY.get('Application.MenuEntries.KeyRemap', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*KeyPad', l.ENTRY.get('Application.MenuEntries.KeyPad', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*PlayBack', l.ENTRY.get('Application.MenuEntries.PlayBack', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*ColorMap', l.ENTRY.get('Application.MenuEntries.Colors', 'basic'))
cond_fillvar(ibm5250_vars, 'IBM5250*27x132', l.ENTRY.get('Application.Appearance.27x132', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*ColumnSeparator', l.ENTRY.get('Application.Appearance.ColumnSeparator', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*DESKTOP_FUNCTION', l.ENTRY.get('Application.Appearance.DesktopFile', 'disable'))
cond_fillvar(ibm5250_vars, 'IBM5250*Command', l.ENTRY.get('Application.EnableCommands.Command', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*Edit', l.ENTRY.get('Application.EnableCommands.Edit', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*Option', l.ENTRY.get('Application.EnableCommands.Option', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*LocalPrint', l.ENTRY.get('Application.EnableCommands.LocalPrint', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*Help', l.ENTRY.get('Application.EnableCommands.Help', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*Control', l.ENTRY.get('Application.EnableCommands.Control', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*MiscPref', l.ENTRY.get('Application.EnableCommands.MiscPref', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*FontMenu', l.ENTRY.get('Application.EnableCommands.FontMenu', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*ChangeIPAddress', l.ENTRY.get('Application.EnableCommands.ChangeIPAddress', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*BrowserStart', l.ENTRY.get('Application.EnableCommands.BrowserStart', 'disable'))
cond_fillvar(ibm5250_vars, 'IBM5250*CURSOR_STYLE', l.ENTRY.get('Application.Appearance.CursorStyle', 'BLOCK_INSERT_UNDERSCORE_REPLACE'))
cond_fillvar(ibm5250_vars, 'IBM5250*CURSOR_BLINK', l.ENTRY.get('Application.Appearance.CursorBlinking', 'disable'))
#cond_fillvar(ibm5250_vars, 'IBM5250*EURO', l.ENTRY.get('Application.Appearance.Euro', 'enable'))
cond_fillvar(ibm5250_vars, 'IBM5250*SESSION_ID', l.ENTRY.get('Application.Session.SessionID', 'Session-+2'))
#cond_fillvar(ibm5250_vars, 'IBM5250*DISPLAY_NAME', l.ENTRY.get('Application.Session.DisplayName', 'USE_HOST_NAME+2'))
cond_fillvar(ibm5250_vars, 'IBM5250*TITLE_OPTION', l.ENTRY.get('Application.Session.TitleOption', 'TEXT_HOST_AND_SESSION_ID'))
cond_fillvar(ibm5250_vars, 'IBM5250*MAX_SESSIONS', l.ENTRY.get('Application.Session.MaxSessions', '99'))
#cond_fillvar(ibm5250_vars, 'IBM5250*DEFAULT_COPY_TYPE', l.ENTRY.get('Application.Appearance.CopyType', 'LINEAR'))

ibm5250_str = '\n'.join(ibm5250_vars)
ibm5250_name = os.path.join(temp_dir, 'IBM5250')
# ibm5250_name = os.path.expanduser('~/IBM5250')
ibm5250_file = open(ibm5250_name, 'w')
ibm5250_file.write(ibm5250 % locals())
ibm5250_file.close()

# build command line arguments
cmdline = [
	'HOME='+temp_dir,
	'LD_LIBRARY_PATH=/opt/ibm/iSeriesAccess/lib:/lib:/usr/lib:/usr/X11R6/lib',
	'/opt/ibm/iSeriesAccess/bin/ibm5250',
	ibm_server
]

# manual parameters
cmdline += [l.ENTRY.get('Application.Parameter', '').strip()]

# display name
displayname = l.ENTRY.get('Application.Session.DisplayName', 'USE_HOST_NAME+9').strip()
if displayname == 'USE_HOST_NAME+9':
	displayname = socket.gethostname()
	displayname = str.upper(displayname)
	displayname = displayname[:8] +'+9'

if displayname != '':
	cmdline += ['-DISPLAY_NAME', displayname]

# optionally skip license requester
licusername = ''
licpassword = ''
licensing = l.ENTRY.get('Application.iSeriesAccessLicensing.UserData', 'Nothing')
if licensing == 'Login':
	# cond_fillvar(ibm5250_vars, 'IBM5250*EMUL_USER_ID', os.environ['USER'])
	# passwort would be nice
	licusername = os.getenv('USER')
	tcostoken = os.getenv('TCOS_TOKEN')
	if licusername != None and tcostoken != None:
		try:
			if os.path.isfile('/opt/sso-tcos/bin/sso-tcos-auth'):
				auth = os.popen('/opt/sso-tcos/bin/sso-tcos-auth')
				password = auth.read()
				auth.close()
				if password != "":
					licpassword = u.shellQuote(password)

		except:
			pass
elif licensing == 'Account':
	# cond_fillvar(ibm5250_vars, 'IBM5250*EMUL_USER_ID', l.ENTRY.get('Application.iSeriesAccessLicensing.User', ''))
	# cond_fillvar(ibm5250_vars, 'IBM5250*EMUL_PASSWORD', l.ENTRY.get('Application.iSeriesAccessLicensing.Password', ''))
	licusername = l.ENTRY.get('Application.iSeriesAccessLicensing.User', '')
	licpassword = l.ENTRY.get('Application.iSeriesAccessLicensing.Password', '')
if licusername != '':
	cmdline += ['-userid', licusername]
	if licpassword != '':
		cmdline += ['-password', licpassword]

# keymap file
keyfile = l.ENTRY.get('Application.SpecificKeymap.KeyFile', '5250.101')
if keyfile == 'manual':
	keyfile = l.ENTRY.get('Application.SpecificKeymap.KeyFileName', '5250.101')
	if keyfile != '5250.101':
		try:
			os.system("cp " + keyfile +  " ~/.iSeriesAccess/ibm_5250/K/")
			keyfile = commands.getoutput("basename " + keyfile)
		except:
			keyfile = ''
			pass

if keyfile != '':
	cmdline += ['-KEYFILE', keyfile]

# language

lang = l.ENTRY.get('Application.Language.locale', 'system')
if lang == 'custom':
	lang = l.ENTRY.get('Application.Language.locale_custom', 'C')
if lang != 'system':
	cmdline += ['-LANGID', lang]

# colormap file
colorfilename_default = os.path.expanduser('~/.iSeriesAccess/ibm_5250/C/') + 'Default.default'
if os.path.isfile(colorfilename_default):
	os.unlink(colorfilename_default)
if l.ENTRY.get('Application.SpecificColormap.Colormap', 'system') == 'manual':
	colorfilename = l.ENTRY.get('Application.SpecificColormap.ColormapName', '')
	if colorfilename:
		colorfile_default = open(colorfilename_default, 'w')
		colorfile_default.write(colorfilename + '\n')
		colorfile_default.close()

# autostart
playbackfile = l.ENTRY.get('Application.Autostart.PlaybackFile', '')
if playbackfile != '':
	cmdline += ['-playback', playbackfile]

# block copy
if l.ENTRY.get('Application.Appearance.CopyType', 'LINEAR') == 'BLOCK':
	cmdline += ['-BLOCK_COPY']

cmdline += ['-title', '"' + apptitle + '"']

exit_action = l.ENTRY.get('General.ExitAction', '')

# FIXME: just a workaround for:
# if not started with "-STAND_ALONE" there is a respawn loop on second start!
returncode = os.system(' '.join(cmdline))
while not commands.getoutput("pidof ibm5250"):
	if exit_action != 'Restart':
		break
	returncode = os.system(' '.join(cmdline))

if devilspiepid != 0:
	os.kill(devilspiepid, signal.SIGTERM)
	# give the kill some time to work
	time.sleep(2)

shutil.rmtree(temp_dir, True)

if not commands.getoutput("pidof ibm5250"):
	if exit_action == 'Logout':
	        os.system("tcos-logout")
	elif exit_action == 'Reboot':
	        os.system("tcos-reboot")
	elif exit_action == 'Shutdown':
	        os.system("tcos-shutdown")
